Index: pax-web-itest/pax-web-itest-container/pax-web-itest-container-jetty/src/test/java/org/ops4j/pax/web/itest/jetty/external/WebSocketWhiteBoardSetup.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pax-web-itest/pax-web-itest-container/pax-web-itest-container-jetty/src/test/java/org/ops4j/pax/web/itest/jetty/external/WebSocketWhiteBoardSetup.java	(revision )
+++ pax-web-itest/pax-web-itest-container/pax-web-itest-container-jetty/src/test/java/org/ops4j/pax/web/itest/jetty/external/WebSocketWhiteBoardSetup.java	(revision )
@@ -0,0 +1,57 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+ * implied.
+ *
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.ops4j.pax.web.itest.jetty.external;
+
+import org.junit.runner.RunWith;
+import org.ops4j.pax.exam.Configuration;
+import org.ops4j.pax.exam.Option;
+import org.ops4j.pax.exam.junit.PaxExam;
+import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
+import org.ops4j.pax.exam.spi.reactors.PerClass;
+import org.ops4j.pax.web.itest.base.AbstractTestBase;
+import org.ops4j.pax.web.itest.jetty.ITestBase;
+import org.ops4j.pax.web.itest.jetty.support.SimpleWebSocket;
+import org.osgi.framework.Constants;
+
+import static org.ops4j.pax.exam.CoreOptions.streamBundle;
+import static org.ops4j.pax.exam.OptionUtils.combine;
+import static org.ops4j.pax.tinybundles.core.TinyBundles.bundle;
+
+@RunWith(PaxExam.class)
+@ExamReactorStrategy(PerClass.class)
+public class WebSocketWhiteBoardSetup extends ITestBase {
+
+    @Configuration
+    public static Option[] configure() {
+        return combine(
+                configureWebSocketJetty(),
+                streamBundle(bundle()
+                        .add(SimpleWebSocket.class)
+                        .add(WebsocketBundleActivator.class)
+                        .add(AbstractTestBase.class)
+                        .add(WebSocketWhiteBoardSetup.class)
+                        .add(ITestBase.class)
+                        .set(Constants.BUNDLE_SYMBOLICNAME, "WebsocketStartupBundle")
+                        .set(Constants.BUNDLE_ACTIVATOR, WebsocketBundleActivator.class.getName())
+                        .set(Constants.EXPORT_PACKAGE, "org.ops4j.pax.web.itest.jetty.external")
+                        .set(Constants.DYNAMICIMPORT_PACKAGE, "*")
+                        .build()
+                )
+        );
+    }
+
+
+}
Index: pax-web-itest/pax-web-itest-container/pax-web-itest-container-jetty/src/test/java/org/ops4j/pax/web/itest/jetty/external/WebsocketBundleActivator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pax-web-itest/pax-web-itest-container/pax-web-itest-container-jetty/src/test/java/org/ops4j/pax/web/itest/jetty/external/WebsocketBundleActivator.java	(revision )
+++ pax-web-itest/pax-web-itest-container/pax-web-itest-container-jetty/src/test/java/org/ops4j/pax/web/itest/jetty/external/WebsocketBundleActivator.java	(revision )
@@ -0,0 +1,37 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+ * implied.
+ *
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.ops4j.pax.web.itest.jetty.external;
+
+import org.ops4j.pax.web.itest.jetty.support.SimpleWebSocket;
+import org.osgi.framework.BundleActivator;
+import org.osgi.framework.BundleContext;
+import org.osgi.framework.ServiceRegistration;
+
+public class WebsocketBundleActivator implements BundleActivator {
+    private ServiceRegistration<?> serviceRegistration;
+
+    @Override
+    public void start(BundleContext context) throws Exception {
+        SimpleWebSocket simpleWebSocket = new SimpleWebSocket();
+        serviceRegistration = context.registerService(Object.class.getName(), simpleWebSocket, null);
+    }
+
+    @Override
+    public void stop(BundleContext context) throws Exception {
+        if (serviceRegistration != null)
+            serviceRegistration.unregister();
+    }
+}
Index: pax-web-itest/pax-web-itest-container/pax-web-itest-container-jetty/src/test/java/org/ops4j/pax/web/itest/jetty/external/WebSocketWhiteBoardIntegrationTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pax-web-itest/pax-web-itest-container/pax-web-itest-container-jetty/src/test/java/org/ops4j/pax/web/itest/jetty/external/WebSocketWhiteBoardIntegrationTest.java	(revision )
+++ pax-web-itest/pax-web-itest-container/pax-web-itest-container-jetty/src/test/java/org/ops4j/pax/web/itest/jetty/external/WebSocketWhiteBoardIntegrationTest.java	(revision )
@@ -0,0 +1,117 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+ * implied.
+ *
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.ops4j.pax.web.itest.jetty.external;
+
+import org.eclipse.jetty.websocket.api.Session;
+import org.eclipse.jetty.websocket.api.StatusCode;
+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketClose;
+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketConnect;
+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketMessage;
+import org.eclipse.jetty.websocket.api.annotations.WebSocket;
+import org.eclipse.jetty.websocket.client.ClientUpgradeRequest;
+import org.eclipse.jetty.websocket.client.WebSocketClient;
+import org.junit.ClassRule;
+import org.junit.Test;
+import org.ops4j.pax.exam.junit.PaxExamServer;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.net.URI;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.Future;
+import java.util.concurrent.TimeUnit;
+
+
+public class WebSocketWhiteBoardIntegrationTest {
+
+    private static final Logger LOG = LoggerFactory.getLogger(WebSocketWhiteBoardIntegrationTest.class);
+
+    @ClassRule
+    public static PaxExamServer exam = new PaxExamServer(WebSocketWhiteBoardSetup.class);
+
+
+    @Test
+    public void testWebsocket() throws Exception {
+        String destUri = "ws://localhost:8181/simple";
+        WebSocketClient client = new WebSocketClient();
+        SimpleEchoSocket socket = new SimpleEchoSocket();
+        try {
+            client.start();
+
+            URI echoUri = new URI(destUri);
+            ClientUpgradeRequest request = new ClientUpgradeRequest();
+            client.connect(socket, echoUri, request);
+            System.out.printf("Connecting to : %s%n", echoUri);
+
+            // wait for closed socket connection.
+            socket.awaitClose(5, TimeUnit.SECONDS);
+        } finally {
+            try {
+                client.stop();
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+        }
+    }
+
+
+    @WebSocket(maxTextMessageSize = 64 * 1024)
+    public class SimpleEchoSocket {
+        private final CountDownLatch closeLatch;
+        @SuppressWarnings("unused")
+        private Session session;
+
+        public SimpleEchoSocket() {
+            this.closeLatch = new CountDownLatch(1);
+        }
+
+        public boolean awaitClose(int duration, TimeUnit unit) throws InterruptedException {
+            return this.closeLatch.await(duration, unit);
+        }
+
+        @OnWebSocketClose
+        public void onClose(int statusCode, String reason) {
+            System.out.printf("Connection closed: %d - %s%n", statusCode, reason);
+            this.session = null;
+            this.closeLatch.countDown(); // trigger latch
+        }
+
+        @OnWebSocketConnect
+        public void onConnect(Session session) {
+            System.out.printf("Got connect: %s%n", session);
+            this.session = session;
+            try {
+                Future<Void> fut;
+                fut = session.getRemote().sendStringByFuture("Hello");
+                fut.get(2, TimeUnit.SECONDS); // wait for send to complete.
+
+                fut = session.getRemote().sendStringByFuture("Thanks for the conversation.");
+                fut.get(2, TimeUnit.SECONDS); // wait for send to complete.
+
+                session.close(StatusCode.NORMAL, "I'm done");
+            } catch (Throwable t) {
+                t.printStackTrace();
+            }
+        }
+
+        @OnWebSocketMessage
+        public void onMessage(String msg) {
+            System.out.printf("Got msg: %s%n", msg);
+        }
+    }
+
+}
+
